@page "/forecast"
@using NETWeatherAPI.Entities;
@using System.Threading
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Logging
@using NETWeatherAPI;
@using Newtonsoft.Json;
@inject WeatherAPIClient _client
@inject ILogger<Weather> _logger

<h3>🌦 Weather</h3>

@if (Message == "NoRecords")
{
    <div class="alert alert-danger" role="alert">

        <h4 class="alert-heading">🐿 Oh, invalid input</h4>
        <p>
            <i class="oi oi-warning"></i> @Message
            <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="HideErrorBox">
                <span aria-hidden="true">&times;</span>
            </button>
        </p>
    </div>
}

<EditForm Model="@Input" OnValidSubmit="GetForecast" readonly="@loading">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <InputCheckbox @bind-Value="DateFilter.HasDate" id="date" title="Date" class="form-check-input" Name="chkDateFilter" @onclick="ShowHideDateFilter">Date</InputCheckbox>
    <label class="mb-2">Tick to search by Date up to next 14 days</label>
    <InputDate @bind-Value="DateFilter.Date" id="datePicker" class="form-control w-50" hidden="@HideDate" />
    <br />
    <div class="input-group mb-3 w-50 float-start">
        <InputText @bind-Value="Input.Value" id="postalCode" class="form-control" aria-describedby="postalCodeHelp" autocomplete="off" />

    </div>
    <div class="input-group w-50 float-start">
        @if (loading == true)
        {
            <button class="btn btn-primary" type="submit" style="width: 150px; margin-left: 10px;">
                <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                Loading...
            </button>
        }
        else
        {
            <button class="btn btn-primary" type="submit" style="width: 150px; margin-left: 10px;">
                Search
            </button>
        }
    </div>
    <div class="input-group">
        <small id="postalCodeHelp" class="form-text text-muted lblNote">
            <ValidationMessage For="() => Input.Value" /> Search For Weather (ex. Indian City, US Zipcode, UK Postcode, or Canada Postalcode).
        </small>
    </div>
</EditForm>

@if (_forecast is not null)
{
    <hr />
    <h3>
        @_forecast.Location.Name
        <small class="text-muted">@_forecast.Location.Region, @_forecast.Location.Country</small>
    </h3>
    <div class="card-group">
        @foreach (var day in _forecast.Forecast.ForecastDay)
        {
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">
                        @day.Date.DayOfWeek
                        <small class="text-muted text-right">@day.Date.ToShortDateString()</small>
                    </h4>
                    <div class="card-body">
                        <p class="card-text text-capitalize text-lg-left">
                            <img src="@day.Day.Condition.IconURL" alt="@day.Day.Condition.Description">
                            <strong>@day.Day.Condition.Description</strong>
                        </p>

                        <ul class="card-text">
                            <li>@day.Day.MinimumTemperatureC °C to @day.Day.MaximumTemperatureC °C</li>
                            <li>UV: @day.Day.UV</li>
                            @if (day.Day.WillItRain)
                            {
                                <li>Rain (@day.Day.ChanceOfRain%): @day.Day.TotalPrecipitationIN inches</li>
                            }
                            @if (day.Day.WillItSnow)
                            {
                                <li>Snow (@day.Day.ChanceOfSnow%): @day.Day.TotalPrecipitationIN inches</li>
                            }
                            <li>Wind: @day.Day.MaximumWindKPH KPH</li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="card">
    </div>
}

@code {

    public class PostalCodeModel
    {
        [Required(AllowEmptyStrings = false)]
        public string Value { get; set; }
    }

    public class DateModel
    {
        public bool HasDate { get; set; } = false;

        public DateTime Date { get; set; } = DateTime.Now.Date;
    }

    ForecastResponseEntity _forecast;
    PostalCodeModel Input { get; } = new();
    DateModel DateFilter { get; } = new();
    private bool HideDate { get; set; } = true;
    string Message { get; set; }
    bool loading { get; set; } = false;

    private async void GetForecast(EditContext editContext)
    {
        Message = "";
        _forecast = null;
        loading = true;

        try
        {
            string uri = DateFilter.HasDate && DateFilter.Date != DateTime.MinValue
                ? $"{_client.BaseApiUri}forecast.json?key={_client.ApiKey}&q={Input.Value}&dt={DateFilter.Date.Date.ToString("yyyy-MM-dd")}"
                : $"{_client.BaseApiUri}forecast.json?key={_client.ApiKey}&q={Input.Value}&days=3";

            HttpClient httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri(uri);
            var response = await httpClient.GetAsync(uri);
            var content = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<ForecastResponseEntity>(content);

            if (result?.Forecast?.ForecastDay?.Count() > 0)
            {
                _forecast = result;
            }
            else
            {
                Message = "NoRecords";
            }
        }
        catch (Exception e)
        {
            Message = e.Message;

            _logger.LogError(e, "couldn't retrieve forecast");
        }
        finally
        {
            loading = false;
            // poke blazor to reset
            // in case an error has occurred
            StateHasChanged();
        }
    }

    private void ShowHideDateFilter()
    {
        HideDate = !HideDate;
    }

    private void HideErrorBox()
    {
        Message = "";
    }
}